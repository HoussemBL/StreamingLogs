<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.mindlab</groupId>
  <artifactId>spark-schema-transformer</artifactId>
  <!-- <version>1.4.0-${revision}</version> -->
  <version>1.0.0-${revision}</version>
  <name>spark-schema-transformer</name>
  <url>http://www.mindlab.de</url>
  
  
  
  <packaging>jar</packaging>
  
  <properties>
    <!-- Build revision -->
    <!-- Is part of the project version and will be replaced by the revision 
      defined in the maven.config -->
    <!-- <revision>SNAPSHOT</revision> -->
    <!-- SCM -->
    <project.scm.id>storix.mindlab-intern.de</project.scm.id>
    <!-- build -->
    <java.version>1.8</java.version>
    <scala.version>2.11.7</scala.version>
    <scala.binary.full.version>2.11.7</scala.binary.full.version>
    <scala.binaryVersion>2.11</scala.binaryVersion>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- <maven.build.timestamp.format>dd-MM-yyyy HH:mm:ss.SSS z</maven.build.timestamp.format> -->

    <!-- dependencies -->
    <org.apache.spark.version>2.4.0</org.apache.spark.version>
    <org.apache.hadoop.version>2.7.3</org.apache.hadoop.version>
    <org.mongodb.driver.version>3.4.2</org.mongodb.driver.version>
    
    
    
    <!-- mindlab -->
    <!-- build <de.mindlab.build.date>${maven.build.timestamp}</de.mindlab.build.date> -->
    <de.mindlab.build.user>${user.name}</de.mindlab.build.user>
    <de.mindlab.build.os>${os.name} ${os.version} ${os.arch}</de.mindlab.build.os>
    <de.mindlab.build.java>${java.version} ${java.vendor}</de.mindlab.build.java>
    <!-- The target path for copying artifacts when built by CI -->
    <de.mindlab.ci-target>/home/source/03-versions-test/03-eval-chain/${project.name}</de.mindlab.ci-target>

    <!-- testing -->
    <junit.version>4.12</junit.version>
    <org.mockito.version>2.16.0</org.mockito.version>
    <scoverage.scalacPluginVersion>1.3.0</scoverage.scalacPluginVersion>
    <scoverage.plugin.version>1.3.0</scoverage.plugin.version>

  </properties>


  <dependencies>
    <!-- Spark dependencies, provided only -->
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_2.11</artifactId>
      <version>${org.apache.spark.version}</version>
    </dependency>


    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_2.11</artifactId>
      <version>${org.apache.spark.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>${org.apache.hadoop.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-hdfs</artifactId>
      <version>${org.apache.hadoop.version}</version>
    </dependency>

    <dependency>
      <groupId>com.microsoft.azure</groupId>
      <artifactId>azure-storage</artifactId>
      <version>3.0.0</version>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-azure</artifactId>
      <version>${org.apache.hadoop.version}</version>
    </dependency>

    <!-- for testing -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${org.mockito.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
    <groupId>org.scalatest</groupId>
    <artifactId>scalatest_2.11</artifactId>
    <version>2.2.6</version>
    <scope>test</scope>
</dependency>
  </dependencies>

  <build>
    <sourceDirectory>src/main</sourceDirectory>
    <testSourceDirectory>src/test</testSourceDirectory>

    <plugins>
      <!-- Java compiler -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <skipMain>true</skipMain> <!-- skip compile -->
          <skip>true</skip> <!-- skip testCompile -->
        </configuration>
      </plugin>

      <!-- parse the version components -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>add-build-info</id>
            <phase>validate</phase>
            <goals>
              <goal>parse-version</goal>
            </goals>
            <configuration>
              <propertyPrefix>de.mindlab.parsedVersion</propertyPrefix>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- SCM information retrieval -->
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>2.2.5</version>
        <executions>
          <execution>
            <id>get-git-tag</id>
            <goals>
              <goal>revision</goal>
            </goals>
            <phase>validate</phase>
            <configuration>
              <prefix>de.mindlab.scm</prefix>
              <verbose>false</verbose>
              <gitDescribe>
                <skip>false</skip>
              </gitDescribe>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Scala/Java compilation -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.2.2</version>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
          <execution>
            <id>doc</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>doc-jar</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
        <configuration>
          <args>
            <!-- work-around for https://issues.scala-lang.org/browse/SI-8358 -->
            <arg>-nobootcp</arg>
            <arg>-unchecked</arg>
            <arg>-deprecation</arg>
            <arg>-Ywarn-dead-code</arg>
            <arg>-Ywarn-inaccessible</arg>
            <arg>-Ywarn-unused</arg>
            <arg>-Ywarn-unused-import</arg>
            <arg>-Ywarn-value-discard</arg>
          </args>
          <jvmArgs>
            <jvmArg>-Xms64m</jvmArg>
            <jvmArg>-Xmx1024m</jvmArg>
          </jvmArgs>
          <javacArgs>
            <javacArg>-source</javacArg>
            <javacArg>${java.version}</javacArg>
            <javacArg>-target</javacArg>
            <javacArg>${java.version}</javacArg>
            <javacArg>-Xlint:all,-serial,-path</javacArg>
          </javacArgs>
          <header>${project.name} ${project.version}</header>
          <footer>${project.name} ${project.version}</footer>
          <scalaCompatVersion>2.11</scalaCompatVersion>
          <scalaVersion>2.11.7</scalaVersion>
          <outputDirectory>scala</outputDirectory>
          <recompileMode>incremental</recompileMode>
          <useZincServer>true</useZincServer>
          <reportOutputDirectory>${project.build.directory}/site/apidocs</reportOutputDirectory>
          <args>
            <arg>-P:genjavadoc:out=${project.build.directory}/genjavadoc</arg>
          </args>
          <compilerPlugins>
            <compilerPlugin>
              <groupId>com.typesafe.genjavadoc</groupId>
              <artifactId>genjavadoc-plugin_${scala.binary.full.version}</artifactId>
              <version>0.11</version>
            </compilerPlugin>
          </compilerPlugins>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <skipTests>false</skipTests>
          <testFailureIgnore>false</testFailureIgnore>
          <systemPropertyVariables>
            <de.mindlab.surefire>true</de.mindlab.surefire>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <!-- Code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.1</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-code-coverage-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- source packaging -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Ant task: distribution pre processing -->
       
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <id>change-permissions</id>
            <phase>package</phase>
            <configuration>
              <target>
                <chmod file="target/dist/bin/*" perm="755" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      
      <!-- artifact packaging -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>de.mindlab.whiteshark.cli.CacheApp</mainClass>
            </manifest>
            <manifestEntries>
              <version>${project.version}</version>
              <branch>${de.mindlab.scm.branch}</branch>
              <!-- <revision>${buildNumber}</revision> -->
              <!-- <date>${de.mindlab.timestamp}</date> -->
            </manifestEntries>
          </archive>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Resource copying -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dist</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/scripts</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- dependency handling -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dist/lib</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
              <includeScope>runtime</includeScope>
            </configuration>
          </execution>

          <execution>
            <id>copy-jars</id>
            <phase>install</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dist/jars</outputDirectory>
              <overWriteIfNewer>true</overWriteIfNewer>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <type>${project.packaging}</type>
                </artifactItem>
                <artifactItem>
                  <groupId>it.unimi.dsi</groupId>
                  <artifactId>fastutil</artifactId>
                  <version>7.1.0</version>
                  <type>${project.packaging}</type>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>

          <execution>
            <id>copy-lib</id>
            <phase>install</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dist/lib</outputDirectory>
              <overWriteIfNewer>true</overWriteIfNewer>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <type>${project.packaging}</type>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- distribution packaging -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>tgz</id>
            <phase>install</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/assembly/distribution.xml</descriptor>
              </descriptors>
              <tarLongFileMode>posix</tarLongFileMode>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <!-- resources to filter/copy -->
    <resources>
      <!-- filter: -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>de/mindlab/build/**.properties</include>
          <include>scripts/conf/**.json</include>
        </includes>
      </resource>
      <!-- copy: -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>de/mindlab/build/**.properties</exclude>
          <exclude>scripts/conf/**.json</exclude>
        </excludes>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings 
          only. It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      net.alchim31.maven
                    </groupId>
                    <artifactId>
                      scala-maven-plugin
                    </artifactId>
                    <versionRange>
                      [3.2.2,)
                    </versionRange>
                    <goals>
                      <goal>compile</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.apache.maven.plugins
                    </groupId>
                    <artifactId>
                      maven-antrun-plugin
                    </artifactId>
                    <versionRange>
                      [1.7,)
                    </versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.honton.chas
                    </groupId>
                    <artifactId>
                      exists-maven-plugin
                    </artifactId>
                    <versionRange>
                      [0.0.6,)
                    </versionRange>
                    <goals>
                      <goal>remote</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <scm>
    <connection>scm:git:http://storix.mindlab-intern.de/03-eval-chain/spark-schema-transformer.git</connection>
    <url>scm:git:http://storix.mindlab-intern.de/03-eval-chain/spark-schema-transformer.git</url>
  </scm>

  <repositories>
    <repository>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </snapshots>

      <id>MindlabMirror</id>
      <name>The mirror for external dependencies</name>
      <url>http://nexus.mindlab-intern.de:8081/repository/maven-central</url>
    </repository>
    <repository>
      <releases>
        <enabled>false</enabled>
        <updatePolicy>never</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </snapshots>

      <id>Netmind Snapshot</id>
      <name>The netmind snapshot repository</name>
      <url>http://nexus.mindlab-intern.de:8081/repository/netmind</url>
    </repository>

    <repository>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </snapshots>

      <id>Netmind Release</id>
      <name>The netmind release repository</name>
      <url>http://nexus.mindlab-intern.de:8081/repository/netmind</url>
    </repository>
  </repositories>

  <distributionManagement>
    <snapshotRepository>
      <id>netmind</id>
      <name>The netmind snapshot repository</name>
      <url>http://nexus.mindlab-intern.de:8081/repository/netmind</url>
    </snapshotRepository>
    <repository>
      <id>netmind</id>
      <name>The netmind release repository</name>
      <url>http://nexus.mindlab-intern.de:8081/repository/netmind</url>
    </repository>
  </distributionManagement>

  <profiles>
    <profile>
      <id>scala-2.11</id>
      <dependencies>
        <dependency>
          <groupId>org.scala-lang</groupId>
          <artifactId>scala-library</artifactId>
          <version>${scala.version}</version>
        </dependency>
        <dependency>
          <groupId>org.scala-lang.modules</groupId>
          <artifactId>scala-xml_${scala.binaryVersion}</artifactId>
          <version>1.0.6</version>
        </dependency>
        <dependency>
          <groupId>org.scala-lang.modules</groupId>
          <artifactId>scala-parser-combinators_${scala.binaryVersion}</artifactId>
          <version>1.0.4</version>
        </dependency>
        <dependency>
          <groupId>org.scala-lang.modules</groupId>
          <artifactId>scala-swing_${scala.binaryVersion}</artifactId>
          <version>1.0.2</version>
        </dependency>
      </dependencies>
    </profile>
    <!-- Profile to create/update transient files after version change. -->
    <!-- This profile should be used to 'clean validate' a project after 
      each version change. CI jobs should use this profile as pre-build task for 
      each execution. -->
    <profile>
      <id>build-version</id>
      <build>
        <plugins>
          <!-- Ant tasks to build the revision string and enforce version 
            number rules -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.8</version>
            <executions>
              <!-- Build the revision based on the project version and SCM 
                information -->
              <!-- Will create transient files in .mvn/ -->
              <execution>
                <id>build-revision</id>
                <phase>validate</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <exportAntProperties>true</exportAntProperties>
                  <target>
                    <ant dir="${project.basedir}"
                      antfile="build-version-tasks.xml"
                      target="buildRevision" inheritAll="false">
                      <property name="mavenConfig"
                        value="${project.basedir}/.mvn/maven.config" />
                      <property name="versionProperties"
                        value="${project.basedir}/.mvn/version.properties" />
                      <property name="revisionProperties"
                        value=".mvn/revision.properties" />
                      <property name="scmBranch"
                        value="${de.mindlab.scm.branch}" />
                      <property name="scmTags"
                        value="${de.mindlab.scm.tags}" />
                      <property name="majorVersion"
                        value="${de.mindlab.parsedVersion.majorVersion}" />
                      <property name="minorVersion"
                        value="${de.mindlab.parsedVersion.minorVersion}" />
                      <property name="incrementalVersion"
                        value="${de.mindlab.parsedVersion.incrementalVersion}" />
                    </ant>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>clean-revision</id>
                <phase>clean</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <exportAntProperties>true</exportAntProperties>
                  <target>
                    <ant dir="${project.basedir}"
                      antfile="build-version-tasks.xml"
                      target="cleanRevision" inheritAll="false">
                      <property name="mavenConfig"
                        value=".mvn/maven.config" />
                      <property name="versionProperties"
                        value=".mvn/version.properties" />
                      <property name="revisionProperties"
                        value=".mvn/revision.properties" />
                    </ant>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jenkins</id>
      <build>
        <plugins>
          <!-- read version properties for later artifact existence checks -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>properties-maven-plugin</artifactId>
            <version>1.0.0</version>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>read-project-properties</goal>
                </goals>
                <configuration>
                  <files>
                    <file>.mvn/version.properties</file>
                  </files>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- check if artifact exists -->
          <plugin>
            <groupId>org.honton.chas</groupId>
            <artifactId>exists-maven-plugin</artifactId>
            <version>0.0.6</version>
            <executions>
              <execution>
                <!-- fail if a release artifact with the according version 
                  already exists -->
                <id>validate-release-exists</id>
                <phase>validate</phase>
                <goals>
                  <goal>remote</goal>
                </goals>
                <configuration>
                  <project>
                    ${project.groupId}:${project.artifactId}:${de.mindlab.releaseVersion}
                  </project>
                  <artifact>${project.name}-${de.mindlab.releaseVersion}.${project.packaging}</artifact>
                  <skipIfSnapshot>false</skipIfSnapshot>
                  <failIfExists>true</failIfExists>
                </configuration>
              </execution>
              <execution>
                <!-- fail if an artifact with the same version already exists -->
                <id>validate-artifact-exists</id>
                <phase>validate</phase>
                <goals>
                  <goal>remote</goal>
                </goals>
                <configuration>
                  <skipIfSnapshot>true</skipIfSnapshot>
                  <failIfExists>true</failIfExists>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.8</version>
            <executions>
              <!-- Clean dependencies on /home/source/ -->
              <execution>
                <id>clean-ci-dependencies</id>
                <phase>install</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <echo
                      message="Deleting ${de.mindlab.ci-target}/${de.mindlab.parsedVersion.majorVersion}.${de.mindlab.parsedVersion.minorVersion}.${de.mindlab.parsedVersion.incrementalVersion}/${de.mindlab.scm.branch}/lib"></echo>
                    <delete
                      dir="${de.mindlab.ci-target}/${de.mindlab.parsedVersion.majorVersion}.${de.mindlab.parsedVersion.minorVersion}.${de.mindlab.parsedVersion.incrementalVersion}/${de.mindlab.scm.branch}/lib" />
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.0.1</version>
            <executions>
              <!-- copy the build artifact to the appropriate folder for 
                CI builds -->
              <execution>
                <id>copy-ci-artifact</id>
                <phase>install</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <outputDirectory>${de.mindlab.ci-target}/${de.mindlab.parsedVersion.majorVersion}.${de.mindlab.parsedVersion.minorVersion}.${de.mindlab.parsedVersion.incrementalVersion}/${de.mindlab.scm.branch}</outputDirectory>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>${project.artifactId}</artifactId>
                      <version>${project.version}</version>
                      <type>${project.packaging}</type>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
              <execution>
                <!-- copy all dependencies to the library folder for CI builds -->
                <id>copy-ci-dependencies</id>
                <phase>install</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${de.mindlab.ci-target}/${de.mindlab.parsedVersion.majorVersion}.${de.mindlab.parsedVersion.minorVersion}.${de.mindlab.parsedVersion.incrementalVersion}/${de.mindlab.scm.branch}/lib</outputDirectory>
                  <overWriteReleases>true</overWriteReleases>
                  <overWriteSnapshots>true</overWriteSnapshots>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <includeScope>runtime</includeScope>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>


</project>
